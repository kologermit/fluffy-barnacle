from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from loader import dp
from keyboards import *
from db import *
from prodamus.prodamus import prodamus_create_url

rates = '<b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n' \
        '<b>1. –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ.</b>\n' \
        '–ü–æ—à–∞–≥–æ–≤–æ–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ.\n' \
        '–ó–∞–¥–∞–Ω–∏—è —Ä–∞–∑ –≤ —Ç—Ä–∏ –¥–Ω—è.\n' \
        '<b>2. –ì—Ä—É–ø–ø–æ–≤–æ–π —Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏.</b>\n' \
        '–ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑—É—á–µ–Ω–∏–µ.\n' \
        '–û–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º –∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏.\n' \
        '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–∑–≤–æ–Ω—ã —Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n' \
        '<b>3. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.</b>\n' \
        '–û—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ —à–∞–≥–∏\n' \
        '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –ö–∏—Ä–∏–ª–ª–æ–º –ß–µ—É–∑–æ–≤—ã–º\n\n\n' \
        '<b><i>–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ</i></b>'


@dp.message_handler(text='–ù–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å')
async def start_right_now_type_person(m: types.Message):
    subject_type_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=m.from_user.id).all()
    for item1 in r_s1:
        subject_type_name = item1.subject_type_name
    text = ''
    r_s2 = await TypePersonal_Money.filter(key=subject_type_name).all()
    for item2 in r_s2:
        text = item2.description
    await m.answer(f'<b>–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏.</b>\n'
                   f'–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n'
                   f'{text}', reply_markup=ShareOrReadyAuthority.ikb_text)


@dp.callback_query_handler(text='give_me_task:authority')
async def give_me_task_authority(c: types.CallbackQuery, state: FSMContext):
    subject_type_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_type_name = item1.subject_type_name
    hmwrk = ''
    r_s2 = await TypePersonal_Money.filter(key=subject_type_name).all()
    for item2 in r_s2:
        hmwrk = item2.home_work
    await c.message.answer(f'<b>–ê –≤–æ—Ç –∏ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n'
                           f'{hmwrk}', reply_markup=ShareOrReadyAuthority.ikb_work)


@dp.callback_query_handler(text='ready_first:authority')
async def ready_first_authority(c: types.CallbackQuery, state: FSMContext):
    subject_type_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_type_name = item1.subject_type_name
    cong = ''
    r_s2 = await TypePersonal_Money.filter(key=subject_type_name).all()
    for item2 in r_s2:
        cong = item2.congratulation
    await c.message.answer(cong, reply_markup=ShareOrReadyAuthority.ikb_congratulation)


@dp.callback_query_handler(text='go_next:profile')
async def ready_go_next_profile(c: types.CallbackQuery):
    subject_authority_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_authority_name = item1.subject_authority_name
    text = ''
    r_s2 = await AuthorityInBusiness_Money.filter(key=subject_authority_name).all()
    for item2 in r_s2:
        text = item2.description
    await c.message.answer(f'<b>–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç.</b>\n'
                           f'–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n'
                           f'{text}', reply_markup=ShareOrReadyProfile.ikb_text)


@dp.callback_query_handler(text='give_me_task:profile')
async def give_me_task_profile(c: types.CallbackQuery, state: FSMContext):
    subject_authority_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_authority_name = item1.subject_authority_name
    hmwrk = ''
    r_s2 = await AuthorityInBusiness_Money.filter(key=subject_authority_name).all()
    for item2 in r_s2:
        hmwrk = item2.home_work
    await c.message.answer(f'<b>–ê –≤–æ—Ç –∏ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n'
                           f'{hmwrk}', reply_markup=ShareOrReadyProfile.ikb_work)


@dp.callback_query_handler(text='ready_first:profile')
async def ready_first_profile(c: types.CallbackQuery, state: FSMContext):
    subject_authority_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_authority_name = item1.subject_authority_name
    cong = ''
    r_s2 = await AuthorityInBusiness_Money.filter(key=subject_authority_name).all()
    for item2 in r_s2:
        cong = item2.congratulation
    await c.message.answer(f'.{cong}', reply_markup=ShareOrReadyProfile.ikb_congratulation)


@dp.callback_query_handler(text='go_next:end_and_buy')
async def ready_go_next_profile(c: types.CallbackQuery):
    personal_line_id = ''
    design_line_id = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        personal_line_id = item1.personal_line_id
        design_line_id = item1.design_line_id
    description = ''
    r_s2 = await StrategyProfiles_Money.filter(key=f'"{personal_line_id}/{design_line_id}"').all()
    for item2 in r_s2:
        description = item2.description
    await c.message.answer(f'<b>–ü—Ä–æ—Ñ–∏–ª—å.</b>\n'
                           f'–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n'
                           f'{description}', reply_markup=ShareOrReadyBuy.ikb_text)


@dp.callback_query_handler(text='give_me_task:end_and_buy')
async def give_me_task_profile(c: types.CallbackQuery, state: FSMContext):
    personal_line_id = ''
    design_line_id = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        personal_line_id = item1.personal_line_id
        design_line_id = item1.design_line_id
    hmwrk = ''
    r_s2 = await StrategyProfiles_Money.filter(key=f'"{personal_line_id}/{design_line_id}"').all()
    for item2 in r_s2:
        hmwrk = item2.home_work
    await c.message.answer(f'<b>–ê –≤–æ—Ç –∏ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n'
                           f'{hmwrk}', reply_markup=ShareOrReadyBuy.ikb_work)


@dp.callback_query_handler(text='ready_first:end_and_buy')
async def ready_first_profile(c: types.CallbackQuery, state: FSMContext):
    personal_line_id = ''
    design_line_id = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        personal_line_id = item1.personal_line_id
        design_line_id = item1.design_line_id
    cong = ''
    r_s2 = await StrategyProfiles_Money.filter(key=f'"{personal_line_id}/{design_line_id}"').all()
    for item2 in r_s2:
        cong = item2.congratulation
    await c.message.answer(f'.{cong}', reply_markup=ShareOrReadyBuy.ikb_congratulation)


@dp.callback_query_handler(text='go_next:end_and_buy:finish')
async def end_and_buy(c: types.CallbackQuery, state: FSMContext):
    await c.message.answer(f'–ù–∞–¥–µ—é—Å—å, –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ —É–∂–µ –≤–∏–¥–∏—à—å, –∫–∞–∫ —Ç–≤–æ–π <b>–¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è</b> üí∞\n'
                           f'–ù–æ —ç—Ç–æ –ª–∏—à—å <b>–Ω–∞—á–∞–ª–æ –ø—É—Ç–∏</b>. –í–ø–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–∞—è —Ä–∞–±–æ—Ç–∞, —á—Ç–æ–±—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –≤—Å—Ç–∞—Ç—å –Ω–∞ —Å–≤–æ–π '
                           f'<b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å</b> –∫ –¥–µ–Ω—å–≥–∞–º –∏ –±–æ–≥–∞—Ç—Å—Ç–≤—É.\n'
                           f'–¢—ã —É–∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ <b>–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.</b>\n\n'
                           f'–¢—ã –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É?', reply_markup=ikb_pre_choice_rate())


@dp.message_handler(text='–ì–æ—Ç–æ–≤(–∞)')
async def iam_ready_pre_choice_rate(m: types.Message):
    await m.answer(f'–≠—Ç–æ –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!\n'
                   f'–ß–µ—Ä–µ–∑ –≥–æ–¥ <b>–¢—ã —Å–∫–∞–∂–µ—à—å —Å–µ–±–µ "—Å–ø–∞—Å–∏–±–æ"</b>, —á—Ç–æ –ø—Ä–∏–Ω—è–ª(–∞) –µ–≥–æ —Å–µ–π—á–∞—Å. –ò –Ω–∞–º ü•∞\n\n'
                   f'–ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ –¢—ã –ø–æ–ª—É—á–∏—à—å –µ—â—ë 6 —à–∞–≥–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–¥—É—Ç —Ç–µ–±–µ <b>–≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ</b> '
                   f'—Å–≤–æ–µ–π –ø—Ä–∏—Ä–æ–¥—ã –∏ <b>—á–µ—Ç–∫–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞</b> –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ üí∞\n\n'
                   f'–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å <b>–≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ:</b>\n'
                   f'ü´Ç <b>–ì—Ä—É–ø–ø–æ–≤–æ–π</b>, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¢—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä—ã–µ '
                   f'—Ç–∞–∫ –∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –¥–µ–Ω—å–≥–∞–º–∏.\n\n'
                   f'üîù <b><u>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º</u></b>, —Å –∫–æ—Ç–æ—Ä—ã–º –¢—ã —Å–º–æ–∂–µ—à—å <b>–ª–∏—á–Ω–æ –æ–±—Å—É–¥–∏—Ç—å</b> —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é '
                   f'–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Å–≤–æ—ë–º "–¥–µ–Ω–µ–∂–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ". –û–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ —Ç–∞–∫ –∂–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–∞—Ä–∏—Ñ üëç',
                   reply_markup=ikb_choice_rate())
    await m.answer(text='–ö—É—Ä—Å—ã', reply_markup=ikb_products(await Products.filter().all()))


@dp.message_handler(text='–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º ü§ë')
async def met_head(m: types.Message):
    await m.answer("–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º: –º–æ—ë —Ñ–æ—Ç–æ –∏–ª–∏ –ª—É—á—à–µ –≤–∏–¥–µ–æ.\n"
                   "–¢–≤–æ–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –±—É–¥–µ—Ç <b><u>–ö–∏—Ä–∏–ª–ª –ß–µ—É–∑–æ–≤</u></b> - —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ \"FractalHD.House\" –∏ \"6 —Å–∏—Å—Ç–µ–º "
                   "—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è\". –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å-–º–∏–ª–ª–∏–æ–Ω–µ—Ä, –æ–ø—ã—Ç–Ω—ã–π –∫–æ—É—á –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤  –º–∏—Ä –¥—É—Ö–æ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ üôè\n\n"
                   "–í —Ä–∞–±–æ—Ç—É —Å –ö–∏—Ä–∏–ª–ª–æ–º –≤—Ö–æ–¥–∏—Ç <b><u>2 —á–∞—Å–æ–≤—ã—Ö —Å–æ–∑–≤–æ–Ω–∞ –∏ –ª–∏—á–Ω—ã–π —á–∞—Ç</u></b> –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=ikb_choice_rate_after_met_head())


@dp.callback_query_handler(regexp="product[0-9]+")
async def group1(c: types.CallbackQuery, state: FSMContext):
    product = await Products.filter(id=int(c.data.replace("product", ""))).all()
    if len(product) == 0:
        await c.message.answer("–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    p = product[0]
    await c.message.answer(p.name, 
        reply_markup=InlineKeyboardMarkup(1).add(
        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞", url=
        prodamus_create_url({
                "id": p.id,
                "name": p.name,
                "price": p.price,
                "quantity": 1,
                "sku": p.price
            }, p.description, c.from_user
        ),
        callback_data="maraphone")))

@dp.callback_query_handler(text='maraphone')
async def maraphone(c: types.CallbackQuery, state: FSMContext):
    await c.message.answer('–¢—É—Ç –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞')

@dp.message_handler(text='–ù–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –±–æ–≥–∞—Ç—Å—Ç–≤—É')
async def maraphone(m: types.Message):
    await m.answer('–¢—É—Ç –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞')
