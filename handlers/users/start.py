import requests
from aiogram.dispatcher import FSMContext
from aiogram.utils.deep_linking import get_start_link, decode_payload

from db import *
from loader import dp
from keyboards import *
from state import *
from .logger import *


@dp.message_handler(commands=['start'])
@dp.message_handler(commands=['start'], state=Start.states)
async def start(m: types.Message, state: FSMContext):
    await state.finish()
    args = m.get_args()
    reference = decode_payload(args)
    tg_id_ref_ = ''
    r_s = await ReferalProgram.filter(tg_un_ref=reference).all()
    for item in r_s:
        tg_id_ref_ = item.tg_id_ref
    if tg_id_ref_ == m.from_user.id:
        await m.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ –æ—Ç—Ä—ã–≤–∞—Ç—å —Å–≤–æ—é –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∑–∞–ø—Ä–µ—â–µ–Ω–æ!', reply_markup=ikb_main_menu())
        return
    r_s = await ReferalProgram.filter(sell_invited=m.from_user.id).all()
    if len(r_s) != 0:
        await m.answer('–û—Ç–∫—Ä—ã–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!', reply_markup=ikb_main_menu())
        return

    async def answer_photo():
        await m.answer_photo(
            photo='https://sun9-11.userapi.com/impg/ORM9shXVuyn4TF_RBWvGCSzaZwBOLaOYX9haTQ/ksZDIASRC6U.jpg?size=1024x768&quality=95&sign=8d22b1842fc51480520e4e0e243660ae&type=album',
            caption=f'{m.from_user.first_name.capitalize()}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å ‚òÄÔ∏è\n\n'
                    f'–Ø - –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü™¨ –ë–æ—Ç –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ @Fractal_HD ‚ú®\n\n'
                    f'–Ø —Å–º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å—á–∞—Å—Ç—å—é, –ª—é–±–≤–∏ –∏ –±–æ–≥–∞—Ç—Å—Ç–≤—É üôå\n'
                    f'–ò –ø–æ–º–æ–≥—É –≥–∞—Ä–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –≤–æ –≤—Å–µ—Ö –µ—ë —Å—Ñ–µ—Ä–∞—Ö:\n'
                    f'- –î–µ–Ω—å–≥–∞—Ö üí∞\n'
                    f'- –û—Ç–Ω–æ—à–µ–Ω–∏—è—Ö üíû\n'
                    f'- –¢–∞–ª–∞–Ω—Ç–∞—Ö ‚≠êÔ∏è\n'
                    f'- –ó–¥–æ—Ä–æ–≤—å–µ üß¨\n'
                    f'- –í–æ—Å–ø–∏—Ç–∞–Ω–∏–∏ –¥–µ—Ç–µ–π üë∂\n\n'
                    f'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ. –ü–æ–Ω—è—Ç–Ω–æ. –ü—Ä–∞–∫—Ç–∏—á–Ω–æ!\n\n'
                    f'–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏ –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ üìÜ\n'
                    f'–ò –Ø –¥–∞–º –ø–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π üë£\n\n'
                    f'–¢–≤–æ–π –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü´∂', reply_markup=ikb_im_ready())

    try:
        await ReferalProgram.filter(tg_id_ref=tg_id_ref_, sell_invited=1).delete()
        await ReferalProgram.create(tg_id_ref=tg_id_ref_,
                                    tg_un_ref=reference,
                                    sell_invited=m.from_user.id)
        await answer_photo()
        await m.answer(f'–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–¥ —á—Ç–æ –Ω–∞—à–∞ —Å–µ–º—å—è –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è!\n –ë–æ–Ω—É—Å—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞—à–µ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É!')
        await dp.bot.send_message(tg_id_ref_, '–ü—Ä–∏–≤–µ—Ç, –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª —á–µ–ª–æ–≤–µ–∫!')
        return
    except Exception:
        await answer_photo()


@dp.message_handler(text='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞')
async def add_friend(m: types.Message):
    message_logger(m, "start:referal_friend")
    link = await get_start_link(str(m.from_user.username), encode=True)
    await m.answer(f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –º–∞—Ä–∞—Ñ–æ–Ω –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å 20% –æ—Ç –µ–≥–æ –ø–æ–∫—É–ø–∫–∏.\n\n'
                   f'<b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n'
                   f'{link}')
    await ReferalProgram.create(tg_id_ref=m.from_user.id,
                                tg_un_ref=m.from_user.username,
                                sell_invited=True)


@dp.message_handler(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ')
async def go_to_program(m: types.Message):
    message_logger(m, "start:tap_to_start")
    await m.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!', reply_markup=ikb_im_ready())


@dp.message_handler(text='–Ø –≥–æ—Ç–æ–≤!')
async def im_ready(m: types.Message, state: FSMContext):
    message_logger(m, "start:ready")
    if len(await BaseRegistration.filter(tg_id_user=m.from_user.id).all()) != 0:
        await m.answer("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å?", reply_markup=ikb_start_new_or_old_data())
        await state.set_state(Start.new_or_old_data.state)
        return
    await m.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –º—ã –±—É–¥–µ—Ç —É–ª—É—á—à–∞—Ç—å', reply_markup=ikb_choice_sphere())
    await state.set_state(Start.sphere.state)


@dp.message_handler(state=Start.sphere)
async def wht_sphere(m: types.Message, state: FSMContext):
    message_logger(m, "start:sphere")
    if m.text == '–î–µ–Ω—å–≥–∏ –∏ –∫–∞—Ä—å–µ—Ä–∞ üí∞':
        await m.answer_photo(
            photo='https://sun9-13.userapi.com/impg/6pXf4tiBwDZYdd3mfPmRZjVK7Cqd3w1koO-j2Q/KsubM2CGFWY.jpg?size=1280x853&quality=95&sign=3b604ae521ed0ea0effb37f3d8b7e0f2&type=album',
            caption='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω')
    if m.text == '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è ‚ö°Ô∏è':
        await m.answer_photo(
            photo='https://sun9-2.userapi.com/impg/oJ51HViXpLcbtv5CdhcRblG3dHt6LmS0JcICNg/eTWVQ-cxxfM.jpg?size=1024x768&quality=95&sign=d398f1cbc0f8b23e6744b800914de740&type=album',
            caption='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω')
    if m.text == '–û—Ç–Ω–æ—à–µ–Ω–∏—è  (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) ‚ù§Ô∏è –∏ ü§ù':
        await m.answer_photo(
            photo='https://sun9-52.userapi.com/impg/lvKJ75Klkwf6OPAZEc3AFDWh2K8n9wDiw_bYVA/zyQOwIV390o.jpg?size=1024x768&quality=95&sign=e2644870c57dd7438e1d7e32b4549a75&type=album',
            caption='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω')
    if m.text == '–í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ üë∂':
        await m.answer_photo(
            photo='https://sun9-40.userapi.com/impg/lgYJCOjvS2Dim707_YkZOA35GmmH9sncaNDqgQ/9f6eDoz9-AQ.jpg?size=1024x768&quality=95&sign=4e11bac3dc704767011cc823eaa64d0a&type=album',
            caption='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω')
    if m.text == '–¢–∞–ª–∞–Ω—Ç—ã –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ‚≠êÔ∏è':
        await m.answer_photo(
            photo='https://sun9-15.userapi.com/impg/4CCv99AN3l75Mz-vnGe0Q8SN0dzonFlqXhPtFQ/cIHXhUrFYiU.jpg?size=1024x768&quality=95&sign=1280832c8adebf72ef3f76ed168a59b5&type=album',
            caption='–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω')
    await state.update_data(sphere=m.text)

    await m.answer('–í–≤–µ–¥–∏—Ç–µ <b>–ò–ú–Ø</b> —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å üöÄ')
    await state.set_state(Start.name.state)


@dp.message_handler(state=Start.new_or_old_data)
async def new_or_old_data(m: types.Message, state: FSMContext):
    message_logger(m, "start:new_or_old_data")
    if m.text == '–í—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ':
        ikb_choice_data = types.InlineKeyboardMarkup(inline_keyboard=[])
        for item in await BaseRegistration.filter(tg_id_user=m.from_user.id).all():
            ikb_choice_data.add(types.InlineKeyboardButton(text=f'{item.name} {item.born_date}',
                                                           callback_data=f'choice_data:{item.id}'))
        await state.finish()
        await m.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:', reply_markup=ikb_choice_data)
        return
    if m.text == '–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ':
        await state.update_data(is_new_data=True)
        await m.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –º—ã –±—É–¥–µ—Ç —É–ª—É—á—à–∞—Ç—å', reply_markup=ikb_choice_sphere())
        await state.set_state(Start.sphere.state)
        return


@dp.message_handler(state=Start.name)
async def name_s(m: types.Message, state: FSMContext):
    message_logger(m, "start:name")
    await m.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ <b>–¥–∞—Ç—É</b> —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n'
                   '<b>–ù–∞–ø—Ä–∏–º–µ—Ä 12.08.1990</b>')
    await state.update_data(name=m.text)
    await state.set_state(Start.born_date.state)


@dp.message_handler(state=Start.born_date)
async def date_born(m: types.Message, state: FSMContext):
    message_logger(m, "start:born_date")
    if len(m.text) != 10:
        await m.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –¥–∞—Ç—É üòí\n'
                       '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ\n'
                       'üëâ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ üìÜ\n\n'
                       '–¢–≤–æ–π –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü´∂')
        return
    if any(item in "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—éqwertyuiopasdfghjklzxcvbnm-,:;!_*+()/#¬§%&)" for item in m.text):
        await m.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –¥–∞—Ç—É üòí\n'
                       '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ\n'
                       'üëâ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ üìÜ\n\n'
                       '–¢–≤–æ–π –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü´∂')
        return
    if any(item not in ".1234567890" for item in m.text):
        await m.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –¥–∞—Ç—É üòí\n'
                       '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ\n'
                       'üëâ –î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ üìÜ\n\n'
                       '–¢–≤–æ–π –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü´∂')
        return
    await state.update_data(born_date=m.text)
    await m.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å <b>–≤—Ä–µ–º—è</b> –µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n'
                   '<b>–ù–∞–ø—Ä–∏–º–µ—Ä: 13:30</b>')
    await state.set_state(Start.born_time.state)


@dp.message_handler(state=Start.born_time)
async def time_born(m: types.Message, state: FSMContext):
    message_logger(m, "start:born_time")
    if len(m.text) != 5 or \
            any(item in "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—éqwertyuiopasdfghjklzxcvbnm.,;!_*+()/#¬§%&)" for item in
                m.text) or \
            any(item not in ":1234567890" for item in m.text):
        await m.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –¢—ã –Ω–∞–ø–∏—Å–∞–ª üò¢\n'
                       '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä–µ–º—è –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ\n'
                       'üëâ –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã ‚è∞\n\n'
                       '–¢–≤–æ–π –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü´∂')
        return
    await state.update_data(born_time=m.text)
    await m.answer('–ê —Å–µ–π—á–∞—Å –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ <u><b>–≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è</b></u> (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) üåá\n'
                   '–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ –∏–ª–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (–Ω–µ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥).\n\n'
                   'P.S.: –ï—Å–ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ —Å–æ–≤—Å–µ–º –Ω–µ –±–æ–ª—å—à–æ–π, —Ç–æ –Ω–∞–ø–∏—à–∏ <b><u>–±–ª–∏–∂–∞–π—à–∏–π –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Ç–æ–º –∂–µ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ üåê</u></b>')
    await state.set_state(Start.born_city.state)


@dp.message_handler(state=Start.born_city)
async def city_born(m: types.Message, state: FSMContext):
    message_logger(m, "start:born_city")
    if any(item in ".,:;!_*+()/#¬§%&)1234567890" for item in m.text):
        await m.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ø –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –ø—Ä–æ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å üòï\n'
                       '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ü–∏—Ñ—Ä\n'
                       '–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ –∏–ª–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ üåè\n\n'
                       '–¢–≤–æ–π –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü´∂')
        return
    await state.update_data(born_city=m.text)
    c_d = await state.get_data()
    await m.answer(f'<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É!</b>\n\n'
                   f'<b>–°—Ñ–µ—Ä–∞:</b> {c_d["sphere"]}\n'
                   f'<b>–ò–º—è —á–µ–ª–æ–≤–µ–∫–∞:</b> {c_d["name"]}\n'
                   f'<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {c_d["born_date"]}\n'
                   f'<b>–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {c_d["born_time"]}\n'
                   f'<b>–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {c_d["born_city"]}',
                   reply_markup=SendOrDelData.ikb)


@dp.callback_query_handler(text='del_data', state=Start.born_city)
async def del_data(c: types.CallbackQuery, state: FSMContext):
    callback_logger(c, "start:del_data")
    await c.message.delete()
    await c.message.answer('–•–æ—Ä–æ—à–æ, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!')
    await state.finish()
    await c.clean()


@dp.callback_query_handler(text='send_data', state=Start.born_city)
async def send_data(c: types.CallbackQuery, state: FSMContext):
    callback_logger(c, "start:send_data")
    c_d = await state.get_data()
    print(c_d.values())
    r = requests.get('https://bodygraph.online/api_v1/city_list.php?dkey=test_public_key')
    soup = r.json()
    city_id = 0
    text_city = f'{c_d["born_city"]}'
    list_country = {'AU', 'AT', 'AZ', 'DZ', 'AO', 'AR', 'AM', 'BY', 'BE', 'BG', 'BR', 'GB', 'HU', 'VE', 'VN', 'GH',
                    'GN', 'DE', 'GR', 'GE', 'DK', 'CD', 'DO', 'EG', 'ZW', 'IL', 'IN', 'ID', 'IQ', 'IR', 'IE', 'ES',
                    'IT', 'KZ', 'CM', 'CA', 'KE', 'CY', 'CN', 'CO', 'CI', 'CU', 'KG', 'LV', 'LB', 'LT', 'LU', 'MG',
                    'MK', 'MY', 'MT', 'MA', 'MX', 'MZ', 'MD', 'MC', 'NG', 'NL', 'NZ', 'NO', 'AE', 'PK', 'PY', 'PE',
                    'PL', 'PT', 'RU', 'RO', 'SM', 'SA', 'KP', 'SN', 'RS', 'SG', 'SY', 'SK', 'SI', 'US', 'TJ', 'TH',
                    'TW', 'TZ', 'TN', 'TM', 'TR', 'UZ', 'UA', 'UY', 'PH', 'FI', 'FR', 'HR', 'ME', 'CZ', 'CL', 'CH',
                    'SE', 'EC', 'EE', 'ET', 'KR', 'JP'}
    for item_country in list_country:
        for item in soup['data']['country'][item_country]['—Åities']:
            if text_city in str(soup['data']['country'][item_country]['—Åities'][item]):
                if soup['data']['country'][item_country]['—Åities'][item]['city_name_rus'] == text_city:
                    city_id = soup['data']['country'][item_country]['—Åities'][item]['id']

    ddate_y = '.'.join(str(c_d["born_date"]).split('.')[2:3])
    ddate_m = '.'.join(str(c_d["born_date"]).split('.')[1:2])
    ddate_d = '.'.join(str(c_d["born_date"]).split('.')[0:1])
    if str(ddate_m[:1]) == '0':
        ddate_m = ddate_m[1:]
    ddate = f'{ddate_y}-{ddate_m}-{ddate_d}'
    dtime = str(c_d["born_time"])
    city_id = str(city_id)
    r = requests.get(
        f'https://bodygraph.online/api_v1/bodygraph_fractal_min.php?dkey=test_public_key&ddate={ddate}&dtime={dtime}&dcity={city_id}')
    soup = r.json()
    print(soup)
    status = soup['status']
    descr = soup['descr']
    # === data
    # header
    city = soup['data']['header']['city']
    local_birthdate = soup['data']['header']['local_birthdate']
    api_url = soup['data']['header']['api_url']
    bodygraph_id = soup['data']['header']['bodygraph_id']
    # details
    subject_type_id = soup['data']['details']['subject_type_id']
    subject_type_name = soup['data']['details']['subject_type_name']
    personal_line_id = soup['data']['details']['personal_line_id']
    personal_line_name = soup['data']['details']['personal_line_name']
    design_line_id = soup['data']['details']['design_line_id']
    design_line_name = soup['data']['details']['design_line_name']
    profile_id = soup['data']['details']['profile_id']
    profile_name = soup['data']['details']['profile_name']
    subject_authority_id = soup['data']['details']['subject_authority_id']
    subject_authority_name = soup['data']['details']['subject_authority_name']
    # === request
    dkey = soup['request']['dkey']
    ddate = soup['request']['ddate']
    dtime = soup['request']['dtime']
    dcity = soup['request']['dcity']
    received_at = soup['request']['received_at']
    received_from = soup['request']['received_from']
    for user in await BaseRegistration.filter(tg_id_user=c.from_user.id):
        await user.delete()
    await BaseRegistration.create(tg_id_user=c.from_user.id,
                                  tg_un_user=c.from_user.username,
                                  name=c_d["name"],
                                  sphere=c_d["sphere"],
                                  born_date=c_d["born_date"],
                                  born_time=c_d["born_time"],
                                  born_city=f'{c_d["born_city"]} - {city_id}',
                                  subject_type_id=subject_type_id,
                                  subject_type_name=subject_type_name,
                                  personal_line_id=personal_line_id,
                                  personal_line_name=personal_line_name,
                                  design_line_id=design_line_id,
                                  design_line_name=design_line_name,
                                  profile_id=profile_id,
                                  profile_name=profile_name,
                                  subject_authority_id=subject_authority_id,
                                  subject_authority_name=subject_authority_name
                                  )
    if design_line_name == "–ú—É—á–µ–Ω–∏–∫":
        await c.message.answer(
            f'<b>{c_d["name"]}</b> - {str(subject_authority_name).capitalize().replace(" –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç", "")} {str(subject_type_name).capitalize()}\n'
            f'{personal_line_id}/{design_line_id} ({str(personal_line_name).capitalize()}/–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä)')
    else:
        await c.message.answer(
            f'<b>{c_d["name"]}</b> - {str(subject_authority_name).capitalize().replace(" –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç", "")} {str(subject_type_name).capitalize()}\n'
            f'{personal_line_id}/{design_line_id} ({str(personal_line_name).capitalize()}/{str(design_line_name).capitalize()})')
    if c_d["sphere"] == "–î–µ–Ω—å–≥–∏ –∏ –∫–∞—Ä—å–µ—Ä–∞ üí∞":
        await c.message.answer(f'–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üôè\n\n'
                               f'–¢–µ–ø–µ—Ä—å –Ø —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Ç–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏–∫–∏ –∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é —Ç–≤–æ–µ–≥–æ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ üí∞\n\n'
                               f'–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n\n'
                               f'–¢–≤–æ–π –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü´∂',
                               reply_markup=ikb_start_right_now())
    if c_d["sphere"] == "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è ‚ö°Ô∏è":
        pass
    if c_d["sphere"] == "–û—Ç–Ω–æ—à–µ–Ω–∏—è  (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) ‚ù§Ô∏è –∏ ü§ù":
        pass
    if c_d["sphere"] == "–¢–∞–ª–∞–Ω—Ç—ã –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ‚≠êÔ∏è":
        pass
    if c_d["sphere"] == "–í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ üë∂":
        pass
    await state.finish()
    await c.clean()


@dp.callback_query_handler(text_startswith='choice_data')
async def choice_data(c: types.CallbackQuery, state: FSMContext):
    id_check = ':'.join(str(c.data).split(':')[1:2])
    for item in await BaseRegistration.filter(id=id_check).all():
        if item.design_line_name == "–ú—É—á–µ–Ω–∏–∫":
            await c.message.answer(
                f'<b>{item.name}</b> - {str(item.subject_authority_name).capitalize().replace(" –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç", "")} {str(item.subject_type_name).capitalize()}\n'
                f'{item.personal_line_id}/{item.design_line_id} ({str(item.personal_line_name).capitalize()}/–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä)')
        else:
            await c.message.answer(
                f'<b>{item.name}</b> - {str(item.subject_authority_name).capitalize().replace(" –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç", "")} {str(item.subject_type_name).capitalize()}\n'
                f'{item.personal_line_id}/{item.design_line_id} ({str(item.personal_line_name).capitalize()}/{str(item.design_line_name).capitalize()})')
        if item.sphere == "–î–µ–Ω—å–≥–∏ –∏ –∫–∞—Ä—å–µ—Ä–∞ üí∞":
            await c.message.answer(f'–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üôè\n\n'
                                   f'–¢–µ–ø–µ—Ä—å –Ø —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Ç–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏–∫–∏ –∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é —Ç–≤–æ–µ–≥–æ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ üí∞\n\n'
                                   f'–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?\n\n'
                                   f'–¢–≤–æ–π –§—Ä–∞–∫—Ç–∞–ª–∏–∫ ü´∂',
                                   reply_markup=ikb_start_right_now())
        if item.sphere == "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è ‚ö°Ô∏è":
            pass
        if item.sphere == "–û—Ç–Ω–æ—à–µ–Ω–∏—è  (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) ‚ù§Ô∏è –∏ ü§ù":
            pass
        if item.sphere == "–¢–∞–ª–∞–Ω—Ç—ã –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ‚≠êÔ∏è":
            pass
        if item.sphere == "–í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ üë∂":
            pass
    await c.clean()
