import requests, logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from loader import dp
from keyboards import *
from db import *
from prodamus.prodamus import prodamus_create_url

rates = '<b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>\n\n' \
        '<b>1. –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ.</b>\n' \
        '–ü–æ—à–∞–≥–æ–≤–æ–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ.\n' \
        '–ó–∞–¥–∞–Ω–∏—è —Ä–∞–∑ –≤ —Ç—Ä–∏ –¥–Ω—è.\n' \
        '<b>2. –ì—Ä—É–ø–ø–æ–≤–æ–π —Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏.</b>\n' \
        '–ü–æ—à–∞–≥–æ–≤–æ–µ –∏–∑—É—á–µ–Ω–∏–µ.\n' \
        '–û–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º –∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏.\n' \
        '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–∑–≤–æ–Ω—ã —Å –∫—É—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n' \
        '<b>3. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.</b>\n' \
        '–û—Ç–∫—Ä—ã—Ç—ã –≤—Å–µ —à–∞–≥–∏\n' \
        '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –ö–∏—Ä–∏–ª–ª–æ–º –ß–µ—É–∑–æ–≤—ã–º\n\n\n' \
        '<b><i>–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ</i></b>'


@dp.message_handler(text='–ù–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å', state=Steps.authority1)
async def start_right_now_type_person(m: types.Message, state: FSMContext):
    logging.info(await state.get_state())
    ikb = await UniversalIKB.get_data_from_ikb(state)
    subject_type_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=m.from_user.id).all()
    for item1 in r_s1:
        subject_type_name = item1.subject_type_name
    text = ''
    r_s2 = await TypePersonal_Money.filter(key=subject_type_name).all()
    for item2 in r_s2:
        text = item2.description
    await state.set_state(Steps.authority2.state)
    await m.answer(f'<b>–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏.</b>\n'
                   f'–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n'
                   f'{text}', reply_markup=ikb)


@dp.callback_query_handler(text='give_me_task:authority', state=Steps.authority2)
async def give_me_task_authority(c: types.CallbackQuery, state: FSMContext):
    ikb = await UniversalIKB.get_data_from_ikb(state)
    subject_type_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_type_name = item1.subject_type_name
    hmwrk = ''
    r_s2 = await TypePersonal_Money.filter(key=subject_type_name).all()
    for item2 in r_s2:
        hmwrk = item2.home_work
    await state.set_state(Steps.profile.state)
    await c.message.answer(f'<b>–ê –≤–æ—Ç –∏ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n'
                           f'{hmwrk}', reply_markup=ikb)


@dp.callback_query_handler(text='ready_first:authority', state=Steps.profile)
async def ready_first_authority(c: types.CallbackQuery, state: FSMContext):
    ikb = await UniversalIKB.get_data_from_ikb(state)
    subject_type_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_type_name = item1.subject_type_name
    cong = ''
    r_s2 = await TypePersonal_Money.filter(key=subject_type_name).all()
    for item2 in r_s2:
        cong = item2.congratulation
    if cong == "":
        cong = "-"
    await state.set_state(Steps.profile1.state)
    await c.message.answer(cong, reply_markup=ikb)


@dp.callback_query_handler(text='go_next:profile', state=Steps.profile1)
async def ready_go_next_profile(c: types.CallbackQuery, state: FSMContext):
    ikb = await UniversalIKB.get_data_from_ikb(state)
    subject_authority_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_authority_name = item1.subject_authority_name
    text = ''
    r_s2 = await AuthorityInBusiness_Money.filter(key=subject_authority_name).all()
    for item2 in r_s2:
        text = item2.description
    await state.set_state(Steps.profile2.state)
    await c.message.answer(f'<b>–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç.</b>\n'
                           f'–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n'
                           f'{text}', reply_markup=ikb)
    await c.answer()


@dp.callback_query_handler(text='give_me_task:profile', state=Steps.profile2)
async def give_me_task_profile(c: types.CallbackQuery, state: FSMContext):
    ikb = await UniversalIKB.get_data_from_ikb(state)
    subject_authority_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_authority_name = item1.subject_authority_name
    hmwrk = ''
    r_s2 = await AuthorityInBusiness_Money.filter(key=subject_authority_name).all()
    for item2 in r_s2:
        hmwrk = item2.home_work
    await state.set_state(Steps.end_and_buy.state)
    await c.message.answer(f'<b>–ê –≤–æ—Ç –∏ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n'
                           f'{hmwrk}', reply_markup=ikb)
    await c.answer()


@dp.callback_query_handler(text='ready_first:profile', state=Steps.end_and_buy)
async def ready_first_profile(c: types.CallbackQuery, state: FSMContext):
    ikb = await UniversalIKB.get_data_from_ikb(state)
    subject_authority_name = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        subject_authority_name = item1.subject_authority_name
    cong = ''
    r_s2 = await AuthorityInBusiness_Money.filter(key=subject_authority_name).all()
    for item2 in r_s2:
        cong = item2.congratulation
    if cong == "":
        cong = "-"
    await state.set_state(Steps.end_and_buy1.state)
    await c.message.answer(f'{cong}', reply_markup=ikb)


@dp.callback_query_handler(text='go_next:end_and_buy', state=Steps.end_and_buy1)
async def ready_go_next_profile(c: types.CallbackQuery, state: FSMContext):
    ikb = await UniversalIKB.get_data_from_ikb(state)
    personal_line_id = ''
    design_line_id = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        personal_line_id = item1.personal_line_id
        design_line_id = item1.design_line_id
    description = ''
    r_s2 = await StrategyProfiles_Money.filter(key=f'"{personal_line_id}/{design_line_id}"').all()
    for item2 in r_s2:
        description = item2.description
    await state.set_state(Steps.end_and_buy2.state)
    await c.message.answer(f'<b>–ü—Ä–æ—Ñ–∏–ª—å.</b>\n'
                           f'–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ\n\n'
                           f'{description}', reply_markup=ikb)


@dp.callback_query_handler(text='give_me_task:end_and_buy', state=Steps.end_and_buy2)
async def give_me_task_profile(c: types.CallbackQuery, state: FSMContext):
    ikb = await UniversalIKB.get_data_from_ikb(state)
    personal_line_id = ''
    design_line_id = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        personal_line_id = item1.personal_line_id
        design_line_id = item1.design_line_id
    hmwrk = ''
    r_s2 = await StrategyProfiles_Money.filter(key=f'"{personal_line_id}/{design_line_id}"').all()
    for item2 in r_s2:
        hmwrk = item2.home_work
    await state.set_state(Steps.end_and_buy_finish.state)
    await c.message.answer(f'<b>–ê –≤–æ—Ç –∏ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n\n'
                           f'{hmwrk}', reply_markup=ikb)
    await c.answer()


@dp.callback_query_handler(text='ready_first:end_and_buy', state=Steps.end_and_buy_finish)
async def ready_first_profile(c: types.CallbackQuery, state: FSMContext):
    ikb = await UniversalIKB.get_data_from_ikb(state)
    personal_line_id = ''
    design_line_id = ''
    r_s1 = await BaseRegistration.filter(tg_id_user=c.from_user.id).all()
    for item1 in r_s1:
        personal_line_id = item1.personal_line_id
        design_line_id = item1.design_line_id
    cong = ''
    r_s2 = await StrategyProfiles_Money.filter(key=f'"{personal_line_id}/{design_line_id}"').all()
    for item2 in r_s2:
        cong = item2.congratulation
    if cong == "":
        cong = "-"
    await c.message.answer(f'{cong}', reply_markup=ikb)
    await c.answer()


@dp.callback_query_handler(text='go_next:end_and_buy_finish', state=Steps.end_and_buy_finish)
async def end_and_buy(c: types.CallbackQuery, state: FSMContext):
    await c.message.answer(
        f'–ù–∞–¥–µ—é—Å—å, –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ —É–∂–µ –≤–∏–¥–∏—à—å, –∫–∞–∫ —Ç–≤–æ–π <b>–¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è</b> üí∞\n'
        f'–ù–æ —ç—Ç–æ –ª–∏—à—å <b>–Ω–∞—á–∞–ª–æ –ø—É—Ç–∏</b>. –í–ø–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–∞—è —Ä–∞–±–æ—Ç–∞, —á—Ç–æ–±—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –≤—Å—Ç–∞—Ç—å –Ω–∞ —Å–≤–æ–π '
        f'<b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å</b> –∫ –¥–µ–Ω—å–≥–∞–º –∏ –±–æ–≥–∞—Ç—Å—Ç–≤—É.\n'
        f'–¢—ã —É–∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ <b>–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.</b>\n\n'
        f'–¢—ã –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É?', reply_markup=ikb_pre_choice_rate())
    await c.answer()
    await state.finish()

@dp.message_handler(text='–ì–æ—Ç–æ–≤(–∞)')
async def iam_ready_pre_choice_rate(m: types.Message):
    await m.answer(text='–ö—É—Ä—Å—ã', reply_markup=ikb_products(await Products.filter().all()))
    await m.answer(f'–≠—Ç–æ –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!\n'
                   f'–ß–µ—Ä–µ–∑ –≥–æ–¥ <b>–¢—ã —Å–∫–∞–∂–µ—à—å —Å–µ–±–µ "—Å–ø–∞—Å–∏–±–æ"</b>, —á—Ç–æ –ø—Ä–∏–Ω—è–ª(–∞) –µ–≥–æ —Å–µ–π—á–∞—Å. –ò –Ω–∞–º ü•∞\n\n'
                   f'–ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ –¢—ã –ø–æ–ª—É—á–∏—à—å –µ—â—ë 6 —à–∞–≥–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–¥—É—Ç —Ç–µ–±–µ <b>–≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ</b> '
                   f'—Å–≤–æ–µ–π –ø—Ä–∏—Ä–æ–¥—ã –∏ <b>—á–µ—Ç–∫–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞</b> –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ üí∞\n\n'
                   f'–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å <b>–≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ:</b>\n'
                   f'ü´Ç <b>–ì—Ä—É–ø–ø–æ–≤–æ–π</b>, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¢—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä—ã–µ '
                   f'—Ç–∞–∫ –∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –¥–µ–Ω—å–≥–∞–º–∏.\n\n'
                   f'üîù <b><u>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º</u></b>, —Å –∫–æ—Ç–æ—Ä—ã–º –¢—ã —Å–º–æ–∂–µ—à—å <b>–ª–∏—á–Ω–æ –æ–±—Å—É–¥–∏—Ç—å</b> —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é '
                   f'–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Å–≤–æ—ë–º "–¥–µ–Ω–µ–∂–Ω–æ–º –¥–∏–∑–∞–π–Ω–µ". –û–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ —Ç–∞–∫ –∂–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–∞—Ä–∏—Ñ üëç',
                   reply_markup=ikb_choice_rate())


@dp.message_handler(text='–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º ü§ë')
async def met_head(m: types.Message):
    await m.answer("–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º: –º–æ—ë —Ñ–æ—Ç–æ –∏–ª–∏ –ª—É—á—à–µ –≤–∏–¥–µ–æ.\n"
                   "–¢–≤–æ–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –±—É–¥–µ—Ç <b><u>–ö–∏—Ä–∏–ª–ª –ß–µ—É–∑–æ–≤</u></b> - —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ \"FractalHD.House\" –∏ \"6 —Å–∏—Å—Ç–µ–º "
                   "—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è\". –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å-–º–∏–ª–ª–∏–æ–Ω–µ—Ä, –æ–ø—ã—Ç–Ω—ã–π –∫–æ—É—á –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤  –º–∏—Ä –¥—É—Ö–æ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ üôè\n\n"
                   "–í —Ä–∞–±–æ—Ç—É —Å –ö–∏—Ä–∏–ª–ª–æ–º –≤—Ö–æ–¥–∏—Ç <b><u>2 —á–∞—Å–æ–≤—ã—Ö —Å–æ–∑–≤–æ–Ω–∞ –∏ –ª–∏—á–Ω—ã–π —á–∞—Ç</u></b> –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤.",
                   reply_markup=ikb_choice_rate_after_met_head())


@dp.callback_query_handler(regexp="product[0-9]+")
async def group1(c: types.CallbackQuery, state: FSMContext):
    product = await Products.filter(id=int(c.data.replace("product", ""))).all()
    if len(product) == 0:
        await c.message.answer("–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    p = product[0]
    await c.message.answer(p.name, 
        reply_markup=InlineKeyboardMarkup(1).add(
        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞", url=
        prodamus_create_url({
                "id": p.id,
                "name": p.name,
                "price": p.price,
                "quantity": 1,
                "sku": p.price
            }, p.description, c.from_user
        ),
        callback_data="maraphone")))
    await c.answer()

@dp.callback_query_handler(text='maraphone')
async def maraphone(c: types.CallbackQuery, state: FSMContext):
    await c.message.answer('–¢—É—Ç –±—É–¥–µ—Ç –Ω–∞—á–∞–ª–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞')
    await c.answer()

@dp.message_handler(text='–ù–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –±–æ–≥–∞—Ç—Å—Ç–≤—É')
async def payment(m: types.Message):
    d_date_zero = ''
    d_time = ''
    d_city = ''
    for item in await BaseRegistration.filter(tg_id_user=m.from_user.id).all():
        d_date_zero = item.born_date
        d_time = item.born_time
        d_city = item.born_city_id
    print("d_date", d_date_zero)
    print("d_time", d_time)
    print("d_city", d_city)
    ddate_y = '.'.join(str(d_date_zero).split('.')[2:3])
    ddate_m = '.'.join(str(d_date_zero).split('.')[1:2])
    ddate_d = '.'.join(str(d_date_zero).split('.')[0:1])
    d_date = f'{ddate_y}-{ddate_m}-{ddate_d}'
    r = requests.get(
        f'https://bodygraph.online/api_v1/bodygraph_fractal.php?dkey=test_public_key&ddate={d_date}&dtime={d_time}&dcity={d_city}')
    soup = r.json()
    print(soup['data']['header']['image'])
    await m.answer_photo(photo=soup['data']['header']['image'])
    print(soup['data']['header']['details'])
    print(soup['data']['header']['centers'])
    print(soup['data']['header']['channels'])
    print(soup['data']['header']['planets'])
    await m.answer('–ß—Ç–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å - —Ç–µ–∫—Å—Ç')


max_d = {'status': 1,
         'descr': 'Authorized',
         'data':
             {'header':
                  {'paid': 'paid',
                   'paid_at': '2023-12-23 23:13:05',
                   'city': '–ù–æ—è–±—Ä—å—Å–∫ (–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –û–∫—Ä—É–≥), –†–æ—Å—Å–∏—è',
                   'local_birthdate': '2004-07-15 12:00',
                   'image': 'https://bodygraph.online/bodygraphs/65847aa89e4445.68742549.png',
                   'api_url': 'bodygraph_fractal.php',
                   'bodygraph_id': '34281'},
              'details':
                  {'subject_type_id': '4',
                   'subject_type_name': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
                   'personal_line_id': '3',
                   'personal_line_name': '–ú—É—á–µ–Ω–∏–∫',
                   'design_line_id': '5',
                   'design_line_name': '–ï—Ä–µ—Ç–∏–∫',
                   'profile_id': '5',
                   'profile_name': '–ú—É—á–µ–Ω–∏–∫ - –ï—Ä–µ—Ç–∏–∫',
                   'subject_authority_id': '2',
                   'subject_authority_name': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç',
                   'subject_certainty_id': '3',
                   'subject_certainty_name': '–¢—Ä–æ–π–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å'},
              'centers':
                  {
                      '1': {'center_name': '–¢–µ–º–µ–Ω–Ω–æ–π —Ü–µ–Ω—Ç—Ä',
                            'center_state': 'set'},
                      '2': {'center_name': '–ê–¥–∂–Ω–∞ —Ü–µ–Ω—Ç—Ä',
                            'center_state': 'set'},
                      '3': {'center_name': '–ì–æ—Ä–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä',
                            'center_state': 'unset'},
                      '4': {'center_name': '–î–∂–∏ —Ü–µ–Ω—Ç—Ä',
                            'center_state': 'unset'},
                      '5': {'center_name': '–≠–≥–æ —Ü–µ–Ω—Ç—Ä',
                            'center_state': 'set'},
                      '6': {'center_name': '–°–∞–∫—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
                            'center_state': 'set'},
                      '7': {'center_name': '–ö–æ—Ä–Ω–µ–≤–æ–π —Ü–µ–Ω—Ç—Ä',
                            'center_state': 'set'},
                      '8': {'center_name': '–°–µ–ª–µ–∑–µ–Ω–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
                            'center_state': 'set'},
                      '9': {'center_name': '–¶–µ–Ω—Ç—Ä —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–ø–ª–µ—Ç–µ–Ω–∏—è',
                            'center_state': 'set'}},
              'channels': {
                  '23': {'id': 23,
                         'channel_gates': '24-61',
                         'channel_desc_name': '–ö–∞–Ω–∞–ª –û—Å–æ–∑–Ω–∞–Ω–∏—è',
                         'cirquit_name': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ',
                         'is_os16': False},
                  '25': {'id': 25,
                         'channel_gates': '26-44',
                         'channel_desc_name': '–ö–∞–Ω–∞–ª –ü–µ—Ä–µ–¥–∞—á–∏',
                         'cirquit_name': '–ü–ª–µ–º–µ–Ω–Ω—ã–µ',
                         'is_os16': False},
                  '33': {'id': 33,
                         'channel_gates': '37-40',
                         'channel_desc_name': '–ö–∞–Ω–∞–ª –û–±—â–∏–Ω—ã',
                         'cirquit_name': '–ü–ª–µ–º–µ–Ω–Ω—ã–µ',
                         'is_os16': False},
                  '35': {'id': 35,
                         'channel_gates': '42-53',
                         'channel_desc_name': '–ö–∞–Ω–∞–ª –°–æ–∑—Ä–µ–≤–∞–Ω–∏—è',
                         'cirquit_name': '–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–µ',
                         'is_os16': False}
                  },
              'planets': {
                  '1': {'id': 1,
                        'planet_name': '–°–æ–ª–Ω—Ü–µ',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '62':
                                {'gate': '62',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –î–µ—Ç–∞–ª–µ–π',
                                 'gate_line': '3',
                                 'is_penta': False}
                        },
                        '–î–∏–∑–∞–π–Ω': {
                            '42':
                                {'gate': '42',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –†–æ—Å—Ç–∞',
                                 'gate_line': '5',
                                 'is_penta': False}
                        }
                        },
                  '2': {'id': 2,
                        'planet_name': '–ó–µ–º–ª—è',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '61':
                                {'gate': '61',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –¢–∞–π–Ω—ã',
                                 'gate_line': '3',
                                 'is_penta': False}
                        },
                        '–î–∏–∑–∞–π–Ω': {
                            '32':
                                {'gate': '32',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –ü—Ä–µ–µ–º—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
                                 'gate_line': '5',
                                 'is_penta': False}
                        }
                        },
                  '3': {'id': 3,
                        'planet_name': '–õ—É–Ω–∞',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '15':
                                {'gate': '15',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –ö—Ä–∞–π–Ω–æ—Å—Ç–µ–π',
                                 'gate_line': '1',
                                 'is_penta': True}
                        },
                        '–î–∏–∑–∞–π–Ω':
                            {'30':
                                 {'gate': '30',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –ü—Ä–∏–∑–Ω–∞–Ω–∏—è –ß—É–≤—Å—Ç–≤',
                                  'gate_line': '4',
                                  'is_penta': False}
                             }
                        },
                  '4': {'id': 4,
                        'planet_name': '–°–µ–≤–µ—Ä–Ω—ã–π —É–∑–µ–ª',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '24':
                                {'gate': '24',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –†–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
                                 'gate_line': '1',
                                 'is_penta': False}
                        },
                        '–î–∏–∑–∞–π–Ω': {
                            '24':
                                {'gate': '24',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –†–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
                                 'gate_line': '4',
                                 'is_penta': False}
                        }
                        },
                  '5': {'id': 5,
                        'planet_name': '–Æ–∂–Ω—ã–π —É–∑–µ–ª',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '44':
                                {'gate': '44',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –ë–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                                 'gate_line': '1',
                                 'is_penta': False}
                        },
                        '–î–∏–∑–∞–π–Ω': {
                            '44':
                                {'gate': '44',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –ë–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                                 'gate_line': '4',
                                 'is_penta': False}
                        }
                        },
                  '6': {'id': 6,
                        'planet_name': '–ú–µ—Ä–∫—É—Ä–∏–π',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '7':
                                {'gate': '7',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –†–æ–ª–∏ –Ø',
                                 'gate_line': '5',
                                 'is_penta': True}
                        },
                        '–î–∏–∑–∞–π–Ω': {
                            '3':
                                {'gate': '3',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è',
                                 'gate_line': '3',
                                 'is_penta': False}
                        }
                        },
                  '7': {'id': 7,
                        'planet_name': '–í–µ–Ω–µ—Ä–∞',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '35':
                                {'gate': '35',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –ü–µ—Ä–µ–º–µ–Ω',
                                 'gate_line': '3',
                                 'is_penta': False}
                        },
                        '–î–∏–∑–∞–π–Ω': {
                            '16':
                                {'gate': '16',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –ù–∞–≤—ã–∫–æ–≤',
                                 'gate_line': '5',
                                 'is_penta': False}
                        }
                        },
                  '8': {'id': 8,
                        'planet_name': '–ú–∞—Ä—Å',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '7':
                                {'gate': '7',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –†–æ–ª–∏ –Ø',
                                 'gate_line': '1',
                                 'is_penta': True}
                        },
                        '–î–∏–∑–∞–π–Ω': {
                            '35':
                                {'gate': '35',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –ü–µ—Ä–µ–º–µ–Ω',
                                 'gate_line': '5',
                                 'is_penta': False}
                        }
                        },
                  '9': {'id': 9,
                        'planet_name': '–Æ–ø–∏—Ç–µ—Ä',
                        '–õ–∏—á–Ω–æ—Å—Ç—å': {
                            '64':
                                {'gate': '64',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –ó–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
                                 'gate_line': '5',
                                 'is_penta': False}
                        },
                        '–î–∏–∑–∞–π–Ω': {
                            '40':
                                {'gate': '40',
                                 'gate_name': '–í–æ—Ä–æ—Ç–∞ –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞',
                                 'gate_line': '5',
                                 'is_penta': False}
                        }
                        },
                  '10': {'id': 10,
                         'planet_name': '–°–∞—Ç—É—Ä–Ω',
                         '–õ–∏—á–Ω–æ—Å—Ç—å': {
                             '53':
                                 {'gate': '53',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –ù–∞—á–∏–Ω–∞–Ω–∏–π',
                                  'gate_line': '3',
                                  'is_penta': False}
                         },
                         '–î–∏–∑–∞–π–Ω': {
                             '52':
                                 {'gate': '52',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –ë–µ–∑–¥–µ–π—Å—Ç–≤–∏—è',
                                  'gate_line': '4',
                                  'is_penta': False}
                         }
                         },
                  '11': {'id': 11,
                         'planet_name': '–£—Ä–∞–Ω',
                         '–õ–∏—á–Ω–æ—Å—Ç—å': {
                             '37':
                                 {'gate': '37',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –î—Ä—É–∂–±—ã',
                                  'gate_line': '1',
                                  'is_penta': False}
                         },
                         '–î–∏–∑–∞–π–Ω': {
                             '55':
                                 {'gate': '55',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –î—É—Ö–∞',
                                  'gate_line': '6',
                                  'is_penta': False}
                         }
                         },
                  '12': {'id': 12,
                         'planet_name': '–ù–µ–ø—Ç—É–Ω',
                         '–õ–∏—á–Ω–æ—Å—Ç—å': {
                             '13':
                                 {'gate': '13',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –°–ª—É—à–∞—Ç–µ–ª—è',
                                  'gate_line': '2',
                                  'is_penta': True}
                         },
                         '–î–∏–∑–∞–π–Ω': {
                             '13':
                                 {'gate': '13',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –°–ª—É—à–∞—Ç–µ–ª—è',
                                  'gate_line': '2',
                                  'is_penta': True}
                         }
                         },
                  '13': {'id': 13,
                         'planet_name': '–ü–ª—É—Ç–æ–Ω',
                         '–õ–∏—á–Ω–æ—Å—Ç—å': {
                             '26':
                                 {'gate': '26',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –≠–≥–æ–∏—Å—Ç–∞',
                                  'gate_line': '4',
                                  'is_penta': False}
                         },
                         '–î–∏–∑–∞–π–Ω': {
                             '26':
                                 {'gate': '26',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –≠–≥–æ–∏—Å—Ç–∞',
                                  'gate_line': '6',
                                  'is_penta': False}
                         }
                         },
                  '14': {'id': 14,
                         'planet_name': '–•–∏—Ä–æ–Ω',
                         '–õ–∏—á–Ω–æ—Å—Ç—å': {
                             '61':
                                 {'gate': '61',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –¢–∞–π–Ω—ã',
                                  'gate_line': '3',
                                  'is_penta': False}
                         },
                         '–î–∏–∑–∞–π–Ω': {
                             '61':
                                 {'gate': '61',
                                  'gate_name': '–í–æ—Ä–æ—Ç–∞ –¢–∞–π–Ω—ã',
                                  'gate_line': '6',
                                  'is_penta': False}
                         }
                         }
                  }
              },
         'request': {
             'dkey': 'test_public_key',
             'ddate': '2004-07-15',
             'dtime': '12:00',
             'dcity': '3559',
             'received_at': '2023-12-23 23:13:05',
             'received_from': '88.80.60.183'}
         }
